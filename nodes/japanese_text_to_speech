#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import os.path

import rclpy
from rclpy.action import ActionServer
from rclpy.node import Node
from japanese_text_to_speech.action import Speak


class JapaneseTextToSpeech(Node):
    _TEMPORALY_DIR = '/tmp/japanese_text_to_speech'
    _INPUT_TEXT_FILE = _TEMPORALY_DIR + '/input_text'
    _GENERATED_VOICE_FILE = _TEMPORALY_DIR + '/generated_voice.wav'

    def __init__(self):
        super().__init__('japanese_text_to_speech')

        self.declare_parameters(
            namespace='',
            parameters=[
                ('action_name', 'japanese_text_to_speech'),
                ('dictionary_dir', '/var/lib/mecab/dic/open-jtalk/naist-jdic'),
                ('hts_voice_file', '/usr/share/hts-voice/nitech-jp-atr503-m001/nitech_jp_atr503_m001.htsvoice'),
                ('aplayer_command', 'aplay')
            ]
        )
        self._action_name = self.get_parameter('action_name').get_parameter_value().string_value
        self._dictionary_dir = self.get_parameter('dictionary_dir').get_parameter_value().string_value
        self._hts_voice_file = self.get_parameter('hts_voice_file').get_parameter_value().string_value
        self._player_command = self.get_parameter('aplayer_command').get_parameter_value().string_value

        if not os.path.isdir(self._TEMPORALY_DIR):
            os.mkdir(self._TEMPORALY_DIR)
        self._action_server = ActionServer(self, Speak, str(self._action_name), self.execute_callback)

    def execute_callback(self, goal_handle):
        start_time = self.get_clock().now()

        is_succeeded = True

        self.write_input_text(goal_handle.request.text)

        if goal_handle.request.speed_rate > 0.0:
            self.generate_voice(goal_handle.request.speed_rate, goal_handle)
            self.play_voice(goal_handle)
        else:
            print("WARNING: Do not set 'speed_rate' to 0.0")
            is_succeeded = False

        end_time = self.get_clock().now()
        elapsed_time = end_time - start_time

        result = Speak.Result()
        result.elapsed_time = elapsed_time.to_msg()

        if is_succeeded:
            goal_handle.succeed()
        else:
            goal_handle.abort()

        return result


    def write_input_text(self, input_text):
        self.get_logger().info(f'Input text: {input_text}')
        input_text_file = open(self._INPUT_TEXT_FILE, 'w')
        input_text_file.write(input_text)
        input_text_file.close()

    def generate_voice(self, speed_rate, goal_handle):
        feedback = Speak.Feedback()
        feedback.state = Speak.Feedback.GENERATING_VOICE
        goal_handle.publish_feedback(feedback)

        self.get_logger().info('Converting text to wav file...')
        command = 'open_jtalk -x ' + self._dictionary_dir + ' -m ' + self._hts_voice_file + ' -ow ' + self._GENERATED_VOICE_FILE + ' -r ' + str(speed_rate) + ' ' + self._INPUT_TEXT_FILE
        self.get_logger().info(f'Send command: {command}')
        os.system(command)

    def play_voice(self, goal_handle):
        feedback = Speak.Feedback()
        feedback.state = Speak.Feedback.PLAYING_VOICE
        goal_handle.publish_feedback(feedback)

        self.get_logger().info('Playing wav file...')
        command = self._player_command + ' ' + self._GENERATED_VOICE_FILE
        self.get_logger().info(f'Send command: {command}')
        os.system(command)


def main(args=None):

    rclpy.init(args=args)
    tts = JapaneseTextToSpeech()
    rclpy.spin(tts)


if __name__ == '__main__':
    main()
